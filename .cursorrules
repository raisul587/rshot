# Instructions

During your interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section in the `.cursorrules` file so you will not make the same mistake again. 

You should also use the `.cursorrules` file as a Scratchpad to organize your thoughts. Especially when you receive a new task, you should first review the content of the Scratchpad, clear old different task if necessary, first explain the task, and plan the steps you need to take to complete the task. You can use todo markers to indicate the progress, e.g.
[X] Task 1
[ ] Task 2

Also update the progress of the task in the Scratchpad when you finish a subtask.
Especially when you finished a milestone, it will help to improve your depth of task accomplishment to use the Scratchpad to reflect and plan.
The goal is to help you maintain a big picture as well as the progress of the task. Always refer to the Scratchpad when you plan the next step.



# Lessons

## User Specified Lessons

- You have a python venv in ./venv. Use it.
- Include info useful for debugging in the program output.
- Read the file before you try to edit it.
- Due to Cursor's limit, when you use `git` and `gh` and need to submit a multiline commit message, first write the message in a file, and then use `git commit -F <filename>` or similar command to commit. And then remove the file. Include "[Cursor] " in the commit message and PR title.

## Cursor learned

- For search results, ensure proper handling of different character encodings (UTF-8) for international queries
- Add debug information to stderr while keeping the main output clean in stdout for better pipeline integration
- When using seaborn styles in matplotlib, use 'seaborn-v0_8' instead of 'seaborn' as the style name due to recent seaborn version changes
- Use 'gpt-4o' as the model name for OpenAI's GPT-4 with vision capabilities
- Use YAML for configuration files to improve maintainability and readability
- Keep legacy code with clear deprecation notices for backward compatibility
- Store machine learning data in a separate data directory for better organization
- Use dataclasses for structured data handling
- Implement confidence scores for predictions to help users make better decisions
- Use Scapy for low-level network packet handling
- Implement proper cleanup in destructors
- Add version checks for system dependencies

# Scratchpad

## Task: Improve Router Compatibility and WPS Security Testing

Current analysis shows this is a WPS (WiFi Protected Setup) security testing tool. The goal is to improve:
1. Router compatibility
2. WPS PIN generation methods
3. PSK (Pre-Shared Key) retrieval methods

### Current State Analysis:
- Uses wpa_supplicant for WPS connections
- Has multiple PIN generation algorithms based on router vendor MAC prefixes
- Supports Pixie Dust attack
- Has bruteforce capabilities
- Stores session data for interrupted attempts

### Detailed Implementation Plan:

[X] 1. Enhance Router Compatibility
  [X] Add support for more router vendors in PIN generation
    [X] Add new vendor MAC prefixes from vulnwsc.txt
    [X] Add new PIN generation algorithms for:
      [X] TP-Link Archer series
      [X] Modern ASUS routers
      [X] Newer D-Link models
      [X] Netgear latest models
  [X] Improve MAC prefix database structure
    [X] Create a JSON/YAML config for easier updates
    [X] Add vendor-specific metadata
  [X] Add modern router models' default PIN patterns
    [X] Add support for WPA3-enabled routers
    [X] Add new PIN generation rules
  [X] Add vendor-specific timing adjustments
    [X] Add delay configurations per vendor
    [X] Implement smart retry mechanisms

[X] 2. Improve WPS PIN Methods
  [X] Add machine learning based PIN prediction
    [X] Implement pattern analysis from successful attempts
    [X] Add statistical model for PIN prediction
  [X] Implement smarter bruteforce patterns
    [X] Add vendor-specific PIN ranges
    [X] Implement adaptive timing
  [X] Add support for router-specific PIN generation rules
    [X] Add configuration for model-specific rules
    [X] Implement new algorithms
  [X] Improve PIN validation checks
    [X] Add checksum verification
    [X] Add PIN format validation

[X] 3. Enhance PSK Retrieval
  [X] Add support for WPA3 networks
    [X] Implement WPA3 handshake capture
    [X] Add SAE authentication support
  [X] Implement better error handling
    [X] Add detailed error messages
    [X] Implement recovery mechanisms
  [X] Add retry mechanisms with backoff
    [X] Add exponential backoff
    [X] Add vendor-specific timing
  [X] Improve session management
    [X] Add better state persistence
    [X] Implement resume capabilities

### Current Focus:
All major improvements have been implemented. Next steps:
1. Add comprehensive documentation
2. Add unit tests
3. Perform integration testing

### Progress:
[X] Initial code analysis complete
[X] Identified areas for improvement
[X] Created new configuration system
[X] Implemented router vendor database
[X] Updated PIN generation algorithms
[X] Added timing configurations
[X] Implemented machine learning based prediction
[X] Implemented WPA3 support
[X] Added error handling and recovery
[ ] Starting documentation and testing

### Implementation Notes:
1. Machine Learning Features:
   - Uses historical PIN attempts to learn patterns
   - Stores vendor-specific patterns
   - Calculates confidence scores for predictions
   - Supports both model and vendor-specific learning
   - Maintains separate data files for history and patterns

2. Configuration System:
   - YAML-based for easy maintenance
   - Supports vendor-specific timing
   - Includes modern router models
   - Maintains backward compatibility

3. WPA3 Support:
   - Implements SAE authentication
   - Supports anti-clogging tokens
   - Includes version checks
   - Handles key derivation
   - Provides detailed status information

4. Next Steps:
   - Write comprehensive documentation
   - Create unit test suite
   - Perform integration testing
   - Add usage examples